syntax = "proto3";


package service;

message Empty {}

message CreateRepoRequest {
    string repoId = 1;
}

message CreateRepoResponse {

}

message DeleteRepoRequest {
    string repoId = 1;
}

message DeleteRepoResponse {

}

message ListReposRequest {

}

message ListReposResponse {
    repeated string repos = 1;
}

message GetRepoRequest {

}

message GetRepoResponse {

}

message CreateBranchRequest {
    string repoId = 1;
    string branchName = 2;
    string commitId = 3;
}


message DeleteBranchRequest {

}


message ListBranchesRequest {
    string repoId = 1;
}

message Branch {
    string name = 1;
    string commitId = 2;
}

message ListBranchesResponse {
    repeated Branch branches = 1;
}

message GetBranchRequest {
    string repoId = 1;
    string branchName = 2;
}

message GetBranchResponse {
    Branch branch = 1;
}

message ListEntriesRequest {

}

message ListEntriesResponse {

}

message GetEntryRequest {

}

message GetEntryResponse {
    string name = 1;
}

message PutEntryRequest {

}

message PutEntryResponse {

}

message DeleteEntryRequest {

}

message DeleteEntryResponse {

}

message DownloadRequest {

}

message DownloadResponse {

}

message CommitRequest {

}

message CommitResponse {

}

message DiffRequest {

}

message DiffResponse {

}

message ResetRequest {

}

message ResetResponse {

}

message CheckoutRequest {

}

message CheckoutResponse {

}

message MergeRequest {

}

message MergeResponse {

}

message CreateUserRequest {

}

message CreateUserResponse {

}

message CreateKeyPairRequest {

}

message CreateKeyPairResponse {

}

message AssignRoleToUserRequest {

}

message AssignRoleToUserResponse {

}

message ListUsersRequest {

}

message ListUsersResponse {

}

message DeleteUserRequest {

}

message DeleteUserResponse {

}

message CreateGroupRequest {

}

message CreateGroupResponse {

}

message AssignRoleToGroupRequest {

}

message AssignRoleToGroupResponse {

}

message ListGroupsRequest {

}

message ListGroupsResponse {

}

message AssignUserToGroupRequest {

}

message AssignUserToGroupResponse {

}

message DeleteGroupRequest {

}

message DeleteGroupResponse {

}


service APIServer {
    // repo level requests
    rpc CreateRepo(CreateRepoRequest) returns (CreateRepoResponse);
    rpc DeleteRepo(DeleteRepoRequest) returns (DeleteRepoResponse);
    rpc ListRepos(ListReposRequest) returns (ListReposResponse);
    rpc GetRepo(GetRepoRequest) returns (GetRepoResponse);

    // branch level requests
    rpc CreateBranch(CreateBranchRequest) returns (Empty);
    rpc DeleteBranch(DeleteBranchRequest) returns (Empty);
    rpc ListBranches(ListBranchesRequest) returns (ListBranchesResponse);
    rpc GetBranch(GetBranchRequest) returns (GetBranchResponse);

    // filesystem operations
    rpc ListEntries(ListEntriesRequest) returns (ListEntriesResponse);
    rpc GetEntry(GetEntryRequest) returns (GetEntryResponse);
    rpc PutEntry(PutEntryRequest) returns (PutEntryResponse);
    rpc DeleteEntry(DeleteEntryRequest) returns (DeleteEntryResponse);
    rpc Download(DownloadRequest) returns (DownloadResponse);

    // index operations
    rpc Commit(CommitRequest) returns (CommitResponse);
    rpc Diff(DiffRequest) returns (DiffResponse);
    rpc Checkout(CheckoutRequest) returns (CheckoutResponse);
    rpc Reset(ResetRequest) returns (ResetResponse);
    rpc Merge(MergeRequest) returns (MergeResponse);

    // authentication/authorization
    rpc CreateUser(CreateUserRequest) returns (CreateUserResponse);
    rpc CreateKeyPair(CreateKeyPairRequest) returns (CreateKeyPairResponse);
    rpc AssignRoleToUser(AssignRoleToUserRequest) returns (AssignRoleToUserResponse);
    rpc ListUsers(ListUsersRequest) returns (ListUsersResponse);
    rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse);
    rpc CreateGroup(CreateGroupRequest) returns (CreateGroupResponse);
    rpc AssignRoleToGroup(AssignRoleToGroupRequest) returns (AssignRoleToGroupResponse);
    rpc ListGroups(ListGroupsRequest) returns (ListGroupsResponse);
    rpc AssignUserToGroup(AssignUserToGroupRequest) returns (AssignUserToGroupResponse);
    rpc DeleteGroup(DeleteGroupRequest) returns (DeleteGroupResponse);
}