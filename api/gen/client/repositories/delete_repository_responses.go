// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/treeverse/lakefs/api/gen/models"
)

// DeleteRepositoryReader is a Reader for the DeleteRepository structure.
type DeleteRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DeleteRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewDeleteRepositoryNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewDeleteRepositoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDeleteRepositoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDeleteRepositoryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDeleteRepositoryNoContent creates a DeleteRepositoryNoContent with default headers values
func NewDeleteRepositoryNoContent() *DeleteRepositoryNoContent {
	return &DeleteRepositoryNoContent{}
}

/*DeleteRepositoryNoContent handles this case with default header values.

repository deleted successfully
*/
type DeleteRepositoryNoContent struct {
}

func (o *DeleteRepositoryNoContent) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{repositoryId}][%d] deleteRepositoryNoContent ", 204)
}

func (o *DeleteRepositoryNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDeleteRepositoryUnauthorized creates a DeleteRepositoryUnauthorized with default headers values
func NewDeleteRepositoryUnauthorized() *DeleteRepositoryUnauthorized {
	return &DeleteRepositoryUnauthorized{}
}

/*DeleteRepositoryUnauthorized handles this case with default header values.

Unauthorized
*/
type DeleteRepositoryUnauthorized struct {
	Payload *models.Error
}

func (o *DeleteRepositoryUnauthorized) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{repositoryId}][%d] deleteRepositoryUnauthorized  %+v", 401, o.Payload)
}

func (o *DeleteRepositoryUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteRepositoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRepositoryNotFound creates a DeleteRepositoryNotFound with default headers values
func NewDeleteRepositoryNotFound() *DeleteRepositoryNotFound {
	return &DeleteRepositoryNotFound{}
}

/*DeleteRepositoryNotFound handles this case with default header values.

repository not found
*/
type DeleteRepositoryNotFound struct {
	Payload *models.Error
}

func (o *DeleteRepositoryNotFound) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{repositoryId}][%d] deleteRepositoryNotFound  %+v", 404, o.Payload)
}

func (o *DeleteRepositoryNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteRepositoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDeleteRepositoryDefault creates a DeleteRepositoryDefault with default headers values
func NewDeleteRepositoryDefault(code int) *DeleteRepositoryDefault {
	return &DeleteRepositoryDefault{
		_statusCode: code,
	}
}

/*DeleteRepositoryDefault handles this case with default header values.

generic error response
*/
type DeleteRepositoryDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the delete repository default response
func (o *DeleteRepositoryDefault) Code() int {
	return o._statusCode
}

func (o *DeleteRepositoryDefault) Error() string {
	return fmt.Sprintf("[DELETE /repositories/{repositoryId}][%d] deleteRepository default  %+v", o._statusCode, o.Payload)
}

func (o *DeleteRepositoryDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *DeleteRepositoryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
