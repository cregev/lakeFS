// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/treeverse/lakefs/api/gen/models"
)

// GetRepositoryReader is a Reader for the GetRepository structure.
type GetRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepositoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetRepositoryUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepositoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetRepositoryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetRepositoryOK creates a GetRepositoryOK with default headers values
func NewGetRepositoryOK() *GetRepositoryOK {
	return &GetRepositoryOK{}
}

/*GetRepositoryOK handles this case with default header values.

repository
*/
type GetRepositoryOK struct {
	Payload *models.Repository
}

func (o *GetRepositoryOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{repositoryId}][%d] getRepositoryOK  %+v", 200, o.Payload)
}

func (o *GetRepositoryOK) GetPayload() *models.Repository {
	return o.Payload
}

func (o *GetRepositoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Repository)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoryUnauthorized creates a GetRepositoryUnauthorized with default headers values
func NewGetRepositoryUnauthorized() *GetRepositoryUnauthorized {
	return &GetRepositoryUnauthorized{}
}

/*GetRepositoryUnauthorized handles this case with default header values.

Unauthorized
*/
type GetRepositoryUnauthorized struct {
	Payload *models.Error
}

func (o *GetRepositoryUnauthorized) Error() string {
	return fmt.Sprintf("[GET /repositories/{repositoryId}][%d] getRepositoryUnauthorized  %+v", 401, o.Payload)
}

func (o *GetRepositoryUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoryUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoryNotFound creates a GetRepositoryNotFound with default headers values
func NewGetRepositoryNotFound() *GetRepositoryNotFound {
	return &GetRepositoryNotFound{}
}

/*GetRepositoryNotFound handles this case with default header values.

repository not found
*/
type GetRepositoryNotFound struct {
	Payload *models.Error
}

func (o *GetRepositoryNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{repositoryId}][%d] getRepositoryNotFound  %+v", 404, o.Payload)
}

func (o *GetRepositoryNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepositoryDefault creates a GetRepositoryDefault with default headers values
func NewGetRepositoryDefault(code int) *GetRepositoryDefault {
	return &GetRepositoryDefault{
		_statusCode: code,
	}
}

/*GetRepositoryDefault handles this case with default header values.

generic error response
*/
type GetRepositoryDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get repository default response
func (o *GetRepositoryDefault) Code() int {
	return o._statusCode
}

func (o *GetRepositoryDefault) Error() string {
	return fmt.Sprintf("[GET /repositories/{repositoryId}][%d] getRepository default  %+v", o._statusCode, o.Payload)
}

func (o *GetRepositoryDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetRepositoryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
