// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/treeverse/lakefs/api/gen/models"
)

// CommitReader is a Reader for the Commit structure.
type CommitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CommitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 201:
		result := NewCommitCreated()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewCommitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCommitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCommitDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCommitCreated creates a CommitCreated with default headers values
func NewCommitCreated() *CommitCreated {
	return &CommitCreated{}
}

/*CommitCreated handles this case with default header values.

commit
*/
type CommitCreated struct {
	Payload *models.Commit
}

func (o *CommitCreated) Error() string {
	return fmt.Sprintf("[POST /repositories/{repositoryId}/branches/{branchId}/commits][%d] commitCreated  %+v", 201, o.Payload)
}

func (o *CommitCreated) GetPayload() *models.Commit {
	return o.Payload
}

func (o *CommitCreated) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Commit)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitUnauthorized creates a CommitUnauthorized with default headers values
func NewCommitUnauthorized() *CommitUnauthorized {
	return &CommitUnauthorized{}
}

/*CommitUnauthorized handles this case with default header values.

Unauthorized
*/
type CommitUnauthorized struct {
	Payload *models.Error
}

func (o *CommitUnauthorized) Error() string {
	return fmt.Sprintf("[POST /repositories/{repositoryId}/branches/{branchId}/commits][%d] commitUnauthorized  %+v", 401, o.Payload)
}

func (o *CommitUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *CommitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitNotFound creates a CommitNotFound with default headers values
func NewCommitNotFound() *CommitNotFound {
	return &CommitNotFound{}
}

/*CommitNotFound handles this case with default header values.

branch not found
*/
type CommitNotFound struct {
	Payload *models.Error
}

func (o *CommitNotFound) Error() string {
	return fmt.Sprintf("[POST /repositories/{repositoryId}/branches/{branchId}/commits][%d] commitNotFound  %+v", 404, o.Payload)
}

func (o *CommitNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *CommitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCommitDefault creates a CommitDefault with default headers values
func NewCommitDefault(code int) *CommitDefault {
	return &CommitDefault{
		_statusCode: code,
	}
}

/*CommitDefault handles this case with default header values.

generic error response
*/
type CommitDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the commit default response
func (o *CommitDefault) Code() int {
	return o._statusCode
}

func (o *CommitDefault) Error() string {
	return fmt.Sprintf("[POST /repositories/{repositoryId}/branches/{branchId}/commits][%d] commit default  %+v", o._statusCode, o.Payload)
}

func (o *CommitDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *CommitDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
