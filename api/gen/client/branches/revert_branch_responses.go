// Code generated by go-swagger; DO NOT EDIT.

package branches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/treeverse/lakefs/api/gen/models"
)

// RevertBranchReader is a Reader for the RevertBranch structure.
type RevertBranchReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RevertBranchReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewRevertBranchNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewRevertBranchUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRevertBranchNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRevertBranchDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRevertBranchNoContent creates a RevertBranchNoContent with default headers values
func NewRevertBranchNoContent() *RevertBranchNoContent {
	return &RevertBranchNoContent{}
}

/*RevertBranchNoContent handles this case with default header values.

reverted
*/
type RevertBranchNoContent struct {
}

func (o *RevertBranchNoContent) Error() string {
	return fmt.Sprintf("[PUT /repositories/{repositoryId}/branches/{branchId}][%d] revertBranchNoContent ", 204)
}

func (o *RevertBranchNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRevertBranchUnauthorized creates a RevertBranchUnauthorized with default headers values
func NewRevertBranchUnauthorized() *RevertBranchUnauthorized {
	return &RevertBranchUnauthorized{}
}

/*RevertBranchUnauthorized handles this case with default header values.

Unauthorized
*/
type RevertBranchUnauthorized struct {
	Payload *models.Error
}

func (o *RevertBranchUnauthorized) Error() string {
	return fmt.Sprintf("[PUT /repositories/{repositoryId}/branches/{branchId}][%d] revertBranchUnauthorized  %+v", 401, o.Payload)
}

func (o *RevertBranchUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevertBranchUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevertBranchNotFound creates a RevertBranchNotFound with default headers values
func NewRevertBranchNotFound() *RevertBranchNotFound {
	return &RevertBranchNotFound{}
}

/*RevertBranchNotFound handles this case with default header values.

commit/branch not found
*/
type RevertBranchNotFound struct {
	Payload *models.Error
}

func (o *RevertBranchNotFound) Error() string {
	return fmt.Sprintf("[PUT /repositories/{repositoryId}/branches/{branchId}][%d] revertBranchNotFound  %+v", 404, o.Payload)
}

func (o *RevertBranchNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevertBranchNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRevertBranchDefault creates a RevertBranchDefault with default headers values
func NewRevertBranchDefault(code int) *RevertBranchDefault {
	return &RevertBranchDefault{
		_statusCode: code,
	}
}

/*RevertBranchDefault handles this case with default header values.

generic error response
*/
type RevertBranchDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the revert branch default response
func (o *RevertBranchDefault) Code() int {
	return o._statusCode
}

func (o *RevertBranchDefault) Error() string {
	return fmt.Sprintf("[PUT /repositories/{repositoryId}/branches/{branchId}][%d] revertBranch default  %+v", o._statusCode, o.Payload)
}

func (o *RevertBranchDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *RevertBranchDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
