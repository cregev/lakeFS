// Code generated by go-swagger; DO NOT EDIT.

package commits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/treeverse/lakefs/api/gen/models"
)

// GetCommitReader is a Reader for the GetCommit structure.
type GetCommitReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCommitReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCommitOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewGetCommitUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetCommitNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetCommitDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCommitOK creates a GetCommitOK with default headers values
func NewGetCommitOK() *GetCommitOK {
	return &GetCommitOK{}
}

/*GetCommitOK handles this case with default header values.

commit
*/
type GetCommitOK struct {
	Payload *models.Commit
}

func (o *GetCommitOK) Error() string {
	return fmt.Sprintf("[GET /repositories/{repositoryId}/commits/{commitId}][%d] getCommitOK  %+v", 200, o.Payload)
}

func (o *GetCommitOK) GetPayload() *models.Commit {
	return o.Payload
}

func (o *GetCommitOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Commit)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCommitUnauthorized creates a GetCommitUnauthorized with default headers values
func NewGetCommitUnauthorized() *GetCommitUnauthorized {
	return &GetCommitUnauthorized{}
}

/*GetCommitUnauthorized handles this case with default header values.

Unauthorized
*/
type GetCommitUnauthorized struct {
	Payload *models.Error
}

func (o *GetCommitUnauthorized) Error() string {
	return fmt.Sprintf("[GET /repositories/{repositoryId}/commits/{commitId}][%d] getCommitUnauthorized  %+v", 401, o.Payload)
}

func (o *GetCommitUnauthorized) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCommitUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCommitNotFound creates a GetCommitNotFound with default headers values
func NewGetCommitNotFound() *GetCommitNotFound {
	return &GetCommitNotFound{}
}

/*GetCommitNotFound handles this case with default header values.

commit not found
*/
type GetCommitNotFound struct {
	Payload *models.Error
}

func (o *GetCommitNotFound) Error() string {
	return fmt.Sprintf("[GET /repositories/{repositoryId}/commits/{commitId}][%d] getCommitNotFound  %+v", 404, o.Payload)
}

func (o *GetCommitNotFound) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCommitNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCommitDefault creates a GetCommitDefault with default headers values
func NewGetCommitDefault(code int) *GetCommitDefault {
	return &GetCommitDefault{
		_statusCode: code,
	}
}

/*GetCommitDefault handles this case with default header values.

generic error response
*/
type GetCommitDefault struct {
	_statusCode int

	Payload *models.Error
}

// Code gets the status code for the get commit default response
func (o *GetCommitDefault) Code() int {
	return o._statusCode
}

func (o *GetCommitDefault) Error() string {
	return fmt.Sprintf("[GET /repositories/{repositoryId}/commits/{commitId}][%d] getCommit default  %+v", o._statusCode, o.Payload)
}

func (o *GetCommitDefault) GetPayload() *models.Error {
	return o.Payload
}

func (o *GetCommitDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Error)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
