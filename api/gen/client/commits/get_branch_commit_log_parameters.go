// Code generated by go-swagger; DO NOT EDIT.

package commits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetBranchCommitLogParams creates a new GetBranchCommitLogParams object
// with the default values initialized.
func NewGetBranchCommitLogParams() *GetBranchCommitLogParams {
	var ()
	return &GetBranchCommitLogParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetBranchCommitLogParamsWithTimeout creates a new GetBranchCommitLogParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetBranchCommitLogParamsWithTimeout(timeout time.Duration) *GetBranchCommitLogParams {
	var ()
	return &GetBranchCommitLogParams{

		timeout: timeout,
	}
}

// NewGetBranchCommitLogParamsWithContext creates a new GetBranchCommitLogParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetBranchCommitLogParamsWithContext(ctx context.Context) *GetBranchCommitLogParams {
	var ()
	return &GetBranchCommitLogParams{

		Context: ctx,
	}
}

// NewGetBranchCommitLogParamsWithHTTPClient creates a new GetBranchCommitLogParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetBranchCommitLogParamsWithHTTPClient(client *http.Client) *GetBranchCommitLogParams {
	var ()
	return &GetBranchCommitLogParams{
		HTTPClient: client,
	}
}

/*GetBranchCommitLogParams contains all the parameters to send to the API endpoint
for the get branch commit log operation typically these are written to a http.Request
*/
type GetBranchCommitLogParams struct {

	/*BranchID*/
	BranchID string
	/*RepositoryID*/
	RepositoryID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get branch commit log params
func (o *GetBranchCommitLogParams) WithTimeout(timeout time.Duration) *GetBranchCommitLogParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get branch commit log params
func (o *GetBranchCommitLogParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get branch commit log params
func (o *GetBranchCommitLogParams) WithContext(ctx context.Context) *GetBranchCommitLogParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get branch commit log params
func (o *GetBranchCommitLogParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get branch commit log params
func (o *GetBranchCommitLogParams) WithHTTPClient(client *http.Client) *GetBranchCommitLogParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get branch commit log params
func (o *GetBranchCommitLogParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBranchID adds the branchID to the get branch commit log params
func (o *GetBranchCommitLogParams) WithBranchID(branchID string) *GetBranchCommitLogParams {
	o.SetBranchID(branchID)
	return o
}

// SetBranchID adds the branchId to the get branch commit log params
func (o *GetBranchCommitLogParams) SetBranchID(branchID string) {
	o.BranchID = branchID
}

// WithRepositoryID adds the repositoryID to the get branch commit log params
func (o *GetBranchCommitLogParams) WithRepositoryID(repositoryID string) *GetBranchCommitLogParams {
	o.SetRepositoryID(repositoryID)
	return o
}

// SetRepositoryID adds the repositoryId to the get branch commit log params
func (o *GetBranchCommitLogParams) SetRepositoryID(repositoryID string) {
	o.RepositoryID = repositoryID
}

// WriteToRequest writes these params to a swagger request
func (o *GetBranchCommitLogParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param branchId
	if err := r.SetPathParam("branchId", o.BranchID); err != nil {
		return err
	}

	// path param repositoryId
	if err := r.SetPathParam("repositoryId", o.RepositoryID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
