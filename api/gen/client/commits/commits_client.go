// Code generated by go-swagger; DO NOT EDIT.

package commits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new commits API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for commits API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	Commit(params *CommitParams, authInfo runtime.ClientAuthInfoWriter) (*CommitCreated, error)

	GetBranchCommitLog(params *GetBranchCommitLogParams, authInfo runtime.ClientAuthInfoWriter) (*GetBranchCommitLogOK, error)

	GetCommit(params *GetCommitParams, authInfo runtime.ClientAuthInfoWriter) (*GetCommitOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  Commit creates commit
*/
func (a *Client) Commit(params *CommitParams, authInfo runtime.ClientAuthInfoWriter) (*CommitCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCommitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "commit",
		Method:             "POST",
		PathPattern:        "/repositories/{repositoryId}/branches/{branchId}/commits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &CommitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CommitCreated)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CommitDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetBranchCommitLog gets commit log for branch
*/
func (a *Client) GetBranchCommitLog(params *GetBranchCommitLogParams, authInfo runtime.ClientAuthInfoWriter) (*GetBranchCommitLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBranchCommitLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBranchCommitLog",
		Method:             "GET",
		PathPattern:        "/repositories/{repositoryId}/branches/{branchId}/commits",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetBranchCommitLogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetBranchCommitLogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetBranchCommitLogDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
  GetCommit gets commit
*/
func (a *Client) GetCommit(params *GetCommitParams, authInfo runtime.ClientAuthInfoWriter) (*GetCommitOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCommitParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCommit",
		Method:             "GET",
		PathPattern:        "/repositories/{repositoryId}/commits/{commitId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetCommitReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCommitOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCommitDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
