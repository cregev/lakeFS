// Code generated by go-swagger; DO NOT EDIT.

package objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadObjectParams creates a new UploadObjectParams object
// with the default values initialized.
func NewUploadObjectParams() *UploadObjectParams {
	var ()
	return &UploadObjectParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUploadObjectParamsWithTimeout creates a new UploadObjectParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUploadObjectParamsWithTimeout(timeout time.Duration) *UploadObjectParams {
	var ()
	return &UploadObjectParams{

		timeout: timeout,
	}
}

// NewUploadObjectParamsWithContext creates a new UploadObjectParams object
// with the default values initialized, and the ability to set a context for a request
func NewUploadObjectParamsWithContext(ctx context.Context) *UploadObjectParams {
	var ()
	return &UploadObjectParams{

		Context: ctx,
	}
}

// NewUploadObjectParamsWithHTTPClient creates a new UploadObjectParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUploadObjectParamsWithHTTPClient(client *http.Client) *UploadObjectParams {
	var ()
	return &UploadObjectParams{
		HTTPClient: client,
	}
}

/*UploadObjectParams contains all the parameters to send to the API endpoint
for the upload object operation typically these are written to a http.Request
*/
type UploadObjectParams struct {

	/*BranchID*/
	BranchID string
	/*Content
	  Object content to upload

	*/
	Content runtime.NamedReadCloser
	/*Path*/
	Path string
	/*RepositoryID*/
	RepositoryID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the upload object params
func (o *UploadObjectParams) WithTimeout(timeout time.Duration) *UploadObjectParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the upload object params
func (o *UploadObjectParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the upload object params
func (o *UploadObjectParams) WithContext(ctx context.Context) *UploadObjectParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the upload object params
func (o *UploadObjectParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the upload object params
func (o *UploadObjectParams) WithHTTPClient(client *http.Client) *UploadObjectParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the upload object params
func (o *UploadObjectParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBranchID adds the branchID to the upload object params
func (o *UploadObjectParams) WithBranchID(branchID string) *UploadObjectParams {
	o.SetBranchID(branchID)
	return o
}

// SetBranchID adds the branchId to the upload object params
func (o *UploadObjectParams) SetBranchID(branchID string) {
	o.BranchID = branchID
}

// WithContent adds the content to the upload object params
func (o *UploadObjectParams) WithContent(content runtime.NamedReadCloser) *UploadObjectParams {
	o.SetContent(content)
	return o
}

// SetContent adds the content to the upload object params
func (o *UploadObjectParams) SetContent(content runtime.NamedReadCloser) {
	o.Content = content
}

// WithPath adds the path to the upload object params
func (o *UploadObjectParams) WithPath(path string) *UploadObjectParams {
	o.SetPath(path)
	return o
}

// SetPath adds the path to the upload object params
func (o *UploadObjectParams) SetPath(path string) {
	o.Path = path
}

// WithRepositoryID adds the repositoryID to the upload object params
func (o *UploadObjectParams) WithRepositoryID(repositoryID string) *UploadObjectParams {
	o.SetRepositoryID(repositoryID)
	return o
}

// SetRepositoryID adds the repositoryId to the upload object params
func (o *UploadObjectParams) SetRepositoryID(repositoryID string) {
	o.RepositoryID = repositoryID
}

// WriteToRequest writes these params to a swagger request
func (o *UploadObjectParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param branchId
	if err := r.SetPathParam("branchId", o.BranchID); err != nil {
		return err
	}

	if o.Content != nil {

		if o.Content != nil {

			// form file param content
			if err := r.SetFileParam("content", o.Content); err != nil {
				return err
			}

		}

	}

	// query param path
	qrPath := o.Path
	qPath := qrPath
	if qPath != "" {
		if err := r.SetQueryParam("path", qPath); err != nil {
			return err
		}
	}

	// path param repositoryId
	if err := r.SetPathParam("repositoryId", o.RepositoryID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
