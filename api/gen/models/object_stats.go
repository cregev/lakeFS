// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	strfmt "github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ObjectStats object stats
// swagger:model object_stats
type ObjectStats struct {

	// checksum
	Checksum string `json:"checksum,omitempty"`

	// mtime
	Mtime int64 `json:"mtime,omitempty"`

	// path
	Path string `json:"path,omitempty"`

	// path type
	// Enum: [TREE OBJECT]
	PathType string `json:"path_type,omitempty"`

	// size bytes
	SizeBytes int64 `json:"size_bytes,omitempty"`
}

// Validate validates this object stats
func (m *ObjectStats) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePathType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var objectStatsTypePathTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["TREE","OBJECT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		objectStatsTypePathTypePropEnum = append(objectStatsTypePathTypePropEnum, v)
	}
}

const (

	// ObjectStatsPathTypeTREE captures enum value "TREE"
	ObjectStatsPathTypeTREE string = "TREE"

	// ObjectStatsPathTypeOBJECT captures enum value "OBJECT"
	ObjectStatsPathTypeOBJECT string = "OBJECT"
)

// prop value enum
func (m *ObjectStats) validatePathTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, objectStatsTypePathTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ObjectStats) validatePathType(formats strfmt.Registry) error {

	if swag.IsZero(m.PathType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePathTypeEnum("path_type", "body", m.PathType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ObjectStats) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ObjectStats) UnmarshalBinary(b []byte) error {
	var res ObjectStats
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
