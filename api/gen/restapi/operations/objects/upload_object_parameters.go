// Code generated by go-swagger; DO NOT EDIT.

package objects

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"io"
	"mime/multipart"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUploadObjectParams creates a new UploadObjectParams object
// no default values defined in spec.
func NewUploadObjectParams() UploadObjectParams {

	return UploadObjectParams{}
}

// UploadObjectParams contains all the bound params for the upload object operation
// typically these are obtained from a http.Request
//
// swagger:parameters uploadObject
type UploadObjectParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*
	  Required: true
	  In: path
	*/
	BranchID string
	/*Object content to upload
	  In: formData
	*/
	Content io.ReadCloser
	/*
	  Required: true
	  In: query
	*/
	Path string
	/*
	  Required: true
	  In: path
	*/
	RepositoryID string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewUploadObjectParams() beforehand.
func (o *UploadObjectParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	if err := r.ParseMultipartForm(32 << 20); err != nil {
		if err != http.ErrNotMultipart {
			return errors.New(400, "%v", err)
		} else if err := r.ParseForm(); err != nil {
			return errors.New(400, "%v", err)
		}
	}

	rBranchID, rhkBranchID, _ := route.Params.GetOK("branchId")
	if err := o.bindBranchID(rBranchID, rhkBranchID, route.Formats); err != nil {
		res = append(res, err)
	}

	content, contentHeader, err := r.FormFile("content")
	if err != nil && err != http.ErrMissingFile {
		res = append(res, errors.New(400, "reading file %q failed: %v", "content", err))
	} else if err == http.ErrMissingFile {
		// no-op for missing but optional file parameter
	} else if err := o.bindContent(content, contentHeader); err != nil {
		res = append(res, err)
	} else {
		o.Content = &runtime.File{Data: content, Header: contentHeader}
	}

	qPath, qhkPath, _ := qs.GetOK("path")
	if err := o.bindPath(qPath, qhkPath, route.Formats); err != nil {
		res = append(res, err)
	}

	rRepositoryID, rhkRepositoryID, _ := route.Params.GetOK("repositoryId")
	if err := o.bindRepositoryID(rRepositoryID, rhkRepositoryID, route.Formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindBranchID binds and validates parameter BranchID from path.
func (o *UploadObjectParams) bindBranchID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.BranchID = raw

	return nil
}

// bindContent binds file parameter Content.
//
// The only supported validations on files are MinLength and MaxLength
func (o *UploadObjectParams) bindContent(file multipart.File, header *multipart.FileHeader) error {
	return nil
}

// bindPath binds and validates parameter Path from query.
func (o *UploadObjectParams) bindPath(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("path", "query")
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false
	if err := validate.RequiredString("path", "query", raw); err != nil {
		return err
	}

	o.Path = raw

	return nil
}

// bindRepositoryID binds and validates parameter RepositoryID from path.
func (o *UploadObjectParams) bindRepositoryID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// Parameter is provided by construction from the route

	o.RepositoryID = raw

	return nil
}
