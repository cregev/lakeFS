// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/treeverse/lakefs/api/gen/models"
)

// CommitCreatedCode is the HTTP code returned for type CommitCreated
const CommitCreatedCode int = 201

/*CommitCreated commit

swagger:response commitCreated
*/
type CommitCreated struct {

	/*
	  In: Body
	*/
	Payload *models.Commit `json:"body,omitempty"`
}

// NewCommitCreated creates CommitCreated with default headers values
func NewCommitCreated() *CommitCreated {

	return &CommitCreated{}
}

// WithPayload adds the payload to the commit created response
func (o *CommitCreated) WithPayload(payload *models.Commit) *CommitCreated {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the commit created response
func (o *CommitCreated) SetPayload(payload *models.Commit) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CommitCreated) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(201)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CommitUnauthorizedCode is the HTTP code returned for type CommitUnauthorized
const CommitUnauthorizedCode int = 401

/*CommitUnauthorized Unauthorized

swagger:response commitUnauthorized
*/
type CommitUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCommitUnauthorized creates CommitUnauthorized with default headers values
func NewCommitUnauthorized() *CommitUnauthorized {

	return &CommitUnauthorized{}
}

// WithPayload adds the payload to the commit unauthorized response
func (o *CommitUnauthorized) WithPayload(payload *models.Error) *CommitUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the commit unauthorized response
func (o *CommitUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CommitUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// CommitNotFoundCode is the HTTP code returned for type CommitNotFound
const CommitNotFoundCode int = 404

/*CommitNotFound branch not found

swagger:response commitNotFound
*/
type CommitNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCommitNotFound creates CommitNotFound with default headers values
func NewCommitNotFound() *CommitNotFound {

	return &CommitNotFound{}
}

// WithPayload adds the payload to the commit not found response
func (o *CommitNotFound) WithPayload(payload *models.Error) *CommitNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the commit not found response
func (o *CommitNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CommitNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*CommitDefault generic error response

swagger:response commitDefault
*/
type CommitDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewCommitDefault creates CommitDefault with default headers values
func NewCommitDefault(code int) *CommitDefault {
	if code <= 0 {
		code = 500
	}

	return &CommitDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the commit default response
func (o *CommitDefault) WithStatusCode(code int) *CommitDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the commit default response
func (o *CommitDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the commit default response
func (o *CommitDefault) WithPayload(payload *models.Error) *CommitDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the commit default response
func (o *CommitDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *CommitDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
