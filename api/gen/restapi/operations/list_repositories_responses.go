// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/treeverse/lakefs/api/gen/models"
)

// ListRepositoriesOKCode is the HTTP code returned for type ListRepositoriesOK
const ListRepositoriesOKCode int = 200

/*ListRepositoriesOK repository list

swagger:response listRepositoriesOK
*/
type ListRepositoriesOK struct {

	/*
	  In: Body
	*/
	Payload []*models.Repository `json:"body,omitempty"`
}

// NewListRepositoriesOK creates ListRepositoriesOK with default headers values
func NewListRepositoriesOK() *ListRepositoriesOK {

	return &ListRepositoriesOK{}
}

// WithPayload adds the payload to the list repositories o k response
func (o *ListRepositoriesOK) WithPayload(payload []*models.Repository) *ListRepositoriesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list repositories o k response
func (o *ListRepositoriesOK) SetPayload(payload []*models.Repository) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRepositoriesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	payload := o.Payload
	if payload == nil {
		// return empty array
		payload = make([]*models.Repository, 0, 50)
	}

	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// ListRepositoriesUnauthorizedCode is the HTTP code returned for type ListRepositoriesUnauthorized
const ListRepositoriesUnauthorizedCode int = 401

/*ListRepositoriesUnauthorized Unauthorized

swagger:response listRepositoriesUnauthorized
*/
type ListRepositoriesUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListRepositoriesUnauthorized creates ListRepositoriesUnauthorized with default headers values
func NewListRepositoriesUnauthorized() *ListRepositoriesUnauthorized {

	return &ListRepositoriesUnauthorized{}
}

// WithPayload adds the payload to the list repositories unauthorized response
func (o *ListRepositoriesUnauthorized) WithPayload(payload *models.Error) *ListRepositoriesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list repositories unauthorized response
func (o *ListRepositoriesUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRepositoriesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*ListRepositoriesDefault generic error response

swagger:response listRepositoriesDefault
*/
type ListRepositoriesDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewListRepositoriesDefault creates ListRepositoriesDefault with default headers values
func NewListRepositoriesDefault(code int) *ListRepositoriesDefault {
	if code <= 0 {
		code = 500
	}

	return &ListRepositoriesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the list repositories default response
func (o *ListRepositoriesDefault) WithStatusCode(code int) *ListRepositoriesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the list repositories default response
func (o *ListRepositoriesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the list repositories default response
func (o *ListRepositoriesDefault) WithPayload(payload *models.Error) *ListRepositoriesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the list repositories default response
func (o *ListRepositoriesDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *ListRepositoriesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
