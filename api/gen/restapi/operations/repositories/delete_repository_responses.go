// Code generated by go-swagger; DO NOT EDIT.

package repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/treeverse/lakefs/api/gen/models"
)

// DeleteRepositoryNoContentCode is the HTTP code returned for type DeleteRepositoryNoContent
const DeleteRepositoryNoContentCode int = 204

/*DeleteRepositoryNoContent repository deleted successfully

swagger:response deleteRepositoryNoContent
*/
type DeleteRepositoryNoContent struct {
}

// NewDeleteRepositoryNoContent creates DeleteRepositoryNoContent with default headers values
func NewDeleteRepositoryNoContent() *DeleteRepositoryNoContent {

	return &DeleteRepositoryNoContent{}
}

// WriteResponse to the client
func (o *DeleteRepositoryNoContent) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.Header().Del(runtime.HeaderContentType) //Remove Content-Type on empty responses

	rw.WriteHeader(204)
}

// DeleteRepositoryUnauthorizedCode is the HTTP code returned for type DeleteRepositoryUnauthorized
const DeleteRepositoryUnauthorizedCode int = 401

/*DeleteRepositoryUnauthorized Unauthorized

swagger:response deleteRepositoryUnauthorized
*/
type DeleteRepositoryUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteRepositoryUnauthorized creates DeleteRepositoryUnauthorized with default headers values
func NewDeleteRepositoryUnauthorized() *DeleteRepositoryUnauthorized {

	return &DeleteRepositoryUnauthorized{}
}

// WithPayload adds the payload to the delete repository unauthorized response
func (o *DeleteRepositoryUnauthorized) WithPayload(payload *models.Error) *DeleteRepositoryUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete repository unauthorized response
func (o *DeleteRepositoryUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRepositoryUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DeleteRepositoryNotFoundCode is the HTTP code returned for type DeleteRepositoryNotFound
const DeleteRepositoryNotFoundCode int = 404

/*DeleteRepositoryNotFound repository not found

swagger:response deleteRepositoryNotFound
*/
type DeleteRepositoryNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteRepositoryNotFound creates DeleteRepositoryNotFound with default headers values
func NewDeleteRepositoryNotFound() *DeleteRepositoryNotFound {

	return &DeleteRepositoryNotFound{}
}

// WithPayload adds the payload to the delete repository not found response
func (o *DeleteRepositoryNotFound) WithPayload(payload *models.Error) *DeleteRepositoryNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete repository not found response
func (o *DeleteRepositoryNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRepositoryNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DeleteRepositoryDefault generic error response

swagger:response deleteRepositoryDefault
*/
type DeleteRepositoryDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDeleteRepositoryDefault creates DeleteRepositoryDefault with default headers values
func NewDeleteRepositoryDefault(code int) *DeleteRepositoryDefault {
	if code <= 0 {
		code = 500
	}

	return &DeleteRepositoryDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the delete repository default response
func (o *DeleteRepositoryDefault) WithStatusCode(code int) *DeleteRepositoryDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the delete repository default response
func (o *DeleteRepositoryDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the delete repository default response
func (o *DeleteRepositoryDefault) WithPayload(payload *models.Error) *DeleteRepositoryDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the delete repository default response
func (o *DeleteRepositoryDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DeleteRepositoryDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
