// Code generated by go-swagger; DO NOT EDIT.

package branches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"

	"github.com/treeverse/lakefs/api/gen/models"
)

// CreateBranchHandlerFunc turns a function with the right signature into a create branch handler
type CreateBranchHandlerFunc func(CreateBranchParams, *models.User) middleware.Responder

// Handle executing the request and returning a response
func (fn CreateBranchHandlerFunc) Handle(params CreateBranchParams, principal *models.User) middleware.Responder {
	return fn(params, principal)
}

// CreateBranchHandler interface for that can handle valid create branch params
type CreateBranchHandler interface {
	Handle(CreateBranchParams, *models.User) middleware.Responder
}

// NewCreateBranch creates a new http.Handler for the create branch operation
func NewCreateBranch(ctx *middleware.Context, handler CreateBranchHandler) *CreateBranch {
	return &CreateBranch{Context: ctx, Handler: handler}
}

/*CreateBranch swagger:route POST /repositories/{repositoryId}/branches branches createBranch

create branch

*/
type CreateBranch struct {
	Context *middleware.Context
	Handler CreateBranchHandler
}

func (o *CreateBranch) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewCreateBranchParams()

	uprinc, aCtx, err := o.Context.Authorize(r, route)
	if err != nil {
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}
	if aCtx != nil {
		r = aCtx
	}
	var principal *models.User
	if uprinc != nil {
		principal = uprinc.(*models.User) // this is really a models.User, I promise
	}

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params, principal) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
