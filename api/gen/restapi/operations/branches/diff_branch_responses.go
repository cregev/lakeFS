// Code generated by go-swagger; DO NOT EDIT.

package branches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/treeverse/lakefs/api/gen/models"
)

// DiffBranchOKCode is the HTTP code returned for type DiffBranchOK
const DiffBranchOKCode int = 200

/*DiffBranchOK diff of branch uncommitted changes

swagger:response diffBranchOK
*/
type DiffBranchOK struct {

	/*
	  In: Body
	*/
	Payload *DiffBranchOKBody `json:"body,omitempty"`
}

// NewDiffBranchOK creates DiffBranchOK with default headers values
func NewDiffBranchOK() *DiffBranchOK {

	return &DiffBranchOK{}
}

// WithPayload adds the payload to the diff branch o k response
func (o *DiffBranchOK) WithPayload(payload *DiffBranchOKBody) *DiffBranchOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the diff branch o k response
func (o *DiffBranchOK) SetPayload(payload *DiffBranchOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DiffBranchOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DiffBranchUnauthorizedCode is the HTTP code returned for type DiffBranchUnauthorized
const DiffBranchUnauthorizedCode int = 401

/*DiffBranchUnauthorized Unauthorized

swagger:response diffBranchUnauthorized
*/
type DiffBranchUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewDiffBranchUnauthorized creates DiffBranchUnauthorized with default headers values
func NewDiffBranchUnauthorized() *DiffBranchUnauthorized {

	return &DiffBranchUnauthorized{}
}

// WithPayload adds the payload to the diff branch unauthorized response
func (o *DiffBranchUnauthorized) WithPayload(payload interface{}) *DiffBranchUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the diff branch unauthorized response
func (o *DiffBranchUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DiffBranchUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DiffBranchNotFoundCode is the HTTP code returned for type DiffBranchNotFound
const DiffBranchNotFoundCode int = 404

/*DiffBranchNotFound branch not found

swagger:response diffBranchNotFound
*/
type DiffBranchNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDiffBranchNotFound creates DiffBranchNotFound with default headers values
func NewDiffBranchNotFound() *DiffBranchNotFound {

	return &DiffBranchNotFound{}
}

// WithPayload adds the payload to the diff branch not found response
func (o *DiffBranchNotFound) WithPayload(payload *models.Error) *DiffBranchNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the diff branch not found response
func (o *DiffBranchNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DiffBranchNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DiffBranchDefault generic error response

swagger:response diffBranchDefault
*/
type DiffBranchDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDiffBranchDefault creates DiffBranchDefault with default headers values
func NewDiffBranchDefault(code int) *DiffBranchDefault {
	if code <= 0 {
		code = 500
	}

	return &DiffBranchDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the diff branch default response
func (o *DiffBranchDefault) WithStatusCode(code int) *DiffBranchDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the diff branch default response
func (o *DiffBranchDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the diff branch default response
func (o *DiffBranchDefault) WithPayload(payload *models.Error) *DiffBranchDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the diff branch default response
func (o *DiffBranchDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DiffBranchDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
