// Code generated by go-swagger; DO NOT EDIT.

package branches

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/treeverse/lakefs/api/gen/models"
)

// DiffBranchesOKCode is the HTTP code returned for type DiffBranchesOK
const DiffBranchesOKCode int = 200

/*DiffBranchesOK diff between branches

swagger:response diffBranchesOK
*/
type DiffBranchesOK struct {

	/*
	  In: Body
	*/
	Payload *DiffBranchesOKBody `json:"body,omitempty"`
}

// NewDiffBranchesOK creates DiffBranchesOK with default headers values
func NewDiffBranchesOK() *DiffBranchesOK {

	return &DiffBranchesOK{}
}

// WithPayload adds the payload to the diff branches o k response
func (o *DiffBranchesOK) WithPayload(payload *DiffBranchesOKBody) *DiffBranchesOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the diff branches o k response
func (o *DiffBranchesOK) SetPayload(payload *DiffBranchesOKBody) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DiffBranchesOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// DiffBranchesUnauthorizedCode is the HTTP code returned for type DiffBranchesUnauthorized
const DiffBranchesUnauthorizedCode int = 401

/*DiffBranchesUnauthorized Unauthorized

swagger:response diffBranchesUnauthorized
*/
type DiffBranchesUnauthorized struct {

	/*
	  In: Body
	*/
	Payload interface{} `json:"body,omitempty"`
}

// NewDiffBranchesUnauthorized creates DiffBranchesUnauthorized with default headers values
func NewDiffBranchesUnauthorized() *DiffBranchesUnauthorized {

	return &DiffBranchesUnauthorized{}
}

// WithPayload adds the payload to the diff branches unauthorized response
func (o *DiffBranchesUnauthorized) WithPayload(payload interface{}) *DiffBranchesUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the diff branches unauthorized response
func (o *DiffBranchesUnauthorized) SetPayload(payload interface{}) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DiffBranchesUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	payload := o.Payload
	if err := producer.Produce(rw, payload); err != nil {
		panic(err) // let the recovery middleware deal with this
	}
}

// DiffBranchesNotFoundCode is the HTTP code returned for type DiffBranchesNotFound
const DiffBranchesNotFoundCode int = 404

/*DiffBranchesNotFound branch not found

swagger:response diffBranchesNotFound
*/
type DiffBranchesNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDiffBranchesNotFound creates DiffBranchesNotFound with default headers values
func NewDiffBranchesNotFound() *DiffBranchesNotFound {

	return &DiffBranchesNotFound{}
}

// WithPayload adds the payload to the diff branches not found response
func (o *DiffBranchesNotFound) WithPayload(payload *models.Error) *DiffBranchesNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the diff branches not found response
func (o *DiffBranchesNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DiffBranchesNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*DiffBranchesDefault generic error response

swagger:response diffBranchesDefault
*/
type DiffBranchesDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewDiffBranchesDefault creates DiffBranchesDefault with default headers values
func NewDiffBranchesDefault(code int) *DiffBranchesDefault {
	if code <= 0 {
		code = 500
	}

	return &DiffBranchesDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the diff branches default response
func (o *DiffBranchesDefault) WithStatusCode(code int) *DiffBranchesDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the diff branches default response
func (o *DiffBranchesDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the diff branches default response
func (o *DiffBranchesDefault) WithPayload(payload *models.Error) *DiffBranchesDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the diff branches default response
func (o *DiffBranchesDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *DiffBranchesDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
