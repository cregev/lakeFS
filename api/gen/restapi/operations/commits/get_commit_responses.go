// Code generated by go-swagger; DO NOT EDIT.

package commits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/runtime"

	"github.com/treeverse/lakefs/api/gen/models"
)

// GetCommitOKCode is the HTTP code returned for type GetCommitOK
const GetCommitOKCode int = 200

/*GetCommitOK commit

swagger:response getCommitOK
*/
type GetCommitOK struct {

	/*
	  In: Body
	*/
	Payload *models.Commit `json:"body,omitempty"`
}

// NewGetCommitOK creates GetCommitOK with default headers values
func NewGetCommitOK() *GetCommitOK {

	return &GetCommitOK{}
}

// WithPayload adds the payload to the get commit o k response
func (o *GetCommitOK) WithPayload(payload *models.Commit) *GetCommitOK {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get commit o k response
func (o *GetCommitOK) SetPayload(payload *models.Commit) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCommitOK) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(200)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCommitUnauthorizedCode is the HTTP code returned for type GetCommitUnauthorized
const GetCommitUnauthorizedCode int = 401

/*GetCommitUnauthorized Unauthorized

swagger:response getCommitUnauthorized
*/
type GetCommitUnauthorized struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCommitUnauthorized creates GetCommitUnauthorized with default headers values
func NewGetCommitUnauthorized() *GetCommitUnauthorized {

	return &GetCommitUnauthorized{}
}

// WithPayload adds the payload to the get commit unauthorized response
func (o *GetCommitUnauthorized) WithPayload(payload *models.Error) *GetCommitUnauthorized {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get commit unauthorized response
func (o *GetCommitUnauthorized) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCommitUnauthorized) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(401)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

// GetCommitNotFoundCode is the HTTP code returned for type GetCommitNotFound
const GetCommitNotFoundCode int = 404

/*GetCommitNotFound commit not found

swagger:response getCommitNotFound
*/
type GetCommitNotFound struct {

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCommitNotFound creates GetCommitNotFound with default headers values
func NewGetCommitNotFound() *GetCommitNotFound {

	return &GetCommitNotFound{}
}

// WithPayload adds the payload to the get commit not found response
func (o *GetCommitNotFound) WithPayload(payload *models.Error) *GetCommitNotFound {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get commit not found response
func (o *GetCommitNotFound) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCommitNotFound) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(404)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}

/*GetCommitDefault generic error response

swagger:response getCommitDefault
*/
type GetCommitDefault struct {
	_statusCode int

	/*
	  In: Body
	*/
	Payload *models.Error `json:"body,omitempty"`
}

// NewGetCommitDefault creates GetCommitDefault with default headers values
func NewGetCommitDefault(code int) *GetCommitDefault {
	if code <= 0 {
		code = 500
	}

	return &GetCommitDefault{
		_statusCode: code,
	}
}

// WithStatusCode adds the status to the get commit default response
func (o *GetCommitDefault) WithStatusCode(code int) *GetCommitDefault {
	o._statusCode = code
	return o
}

// SetStatusCode sets the status to the get commit default response
func (o *GetCommitDefault) SetStatusCode(code int) {
	o._statusCode = code
}

// WithPayload adds the payload to the get commit default response
func (o *GetCommitDefault) WithPayload(payload *models.Error) *GetCommitDefault {
	o.Payload = payload
	return o
}

// SetPayload sets the payload to the get commit default response
func (o *GetCommitDefault) SetPayload(payload *models.Error) {
	o.Payload = payload
}

// WriteResponse to the client
func (o *GetCommitDefault) WriteResponse(rw http.ResponseWriter, producer runtime.Producer) {

	rw.WriteHeader(o._statusCode)
	if o.Payload != nil {
		payload := o.Payload
		if err := producer.Produce(rw, payload); err != nil {
			panic(err) // let the recovery middleware deal with this
		}
	}
}
